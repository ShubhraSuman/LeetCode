/*
// Definition for a Node.
class Node {
public:
    int val;
    Node* left;
    Node* right;
    Node* next;

    Node() : val(0), left(NULL), right(NULL), next(NULL) {}

    Node(int _val) : val(_val), left(NULL), right(NULL), next(NULL) {}

    Node(int _val, Node* _left, Node* _right, Node* _next)
        : val(_val), left(_left), right(_right), next(_next) {}
};
*/

class Solution {
public:
    void levelOrderScan(Node* root)
    {
        queue<Node*> q;
        q.push(root);
        int size = q.size();
        while(size)
        {
            Node* temp = q.front();
            q.pop();
            size--;
            // cout<<temp->val;
            if(size==0)
                temp->next = NULL;
            else
                temp->next = q.front();
            if(temp->left)
                q.push(temp->left);
            if(temp->right)
                q.push(temp->right);
            if(size == 0)
                size = q.size();
        }
    }
    Node* connect(Node* root) {
        if(root==NULL)
            return root;
        levelOrderScan(root);
        return root;
    }
};
